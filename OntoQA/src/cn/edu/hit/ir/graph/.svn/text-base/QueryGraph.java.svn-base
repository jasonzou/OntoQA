/**
 * Copyright 2011 HIT-CIR
 * Research Center for Information Retrieval
 * Harbin Institute of Technology
 * http://ir.hit.edu.cn
 */

package cn.edu.hit.ir.graph;

import java.util.Stack;

import org.apache.log4j.Logger;
import org.jgrapht.graph.SimpleGraph;

import cn.edu.hit.ir.dict.MatchedEntitiesSentence;
import com.hp.hpl.jena.rdf.model.Resource;

/**
 * The graph of matched entities generated by matching from tokens of query to 
 * the entities in the ontology.
 *
 * @author   bin3 (bin183cs@gmail.com)
 * @version  0.1.0
 * @date	 2011-6-6
 */

public class QueryGraph 
	extends SimpleGraph<QueryNode, QueryEdge>
	implements Comparable<QueryGraph> {

	private static final long serialVersionUID = 1L;
	
	private static Logger logger = Logger.getLogger(QueryGraph.class);
	
	private MatchedEntitiesSentence sentence;
	
	private QueryNode source;
	
	private double weight;
	
	private Stack<QueryNode> nodes;
	
	private boolean isCount;
	
	public QueryGraph(MatchedEntitiesSentence sentence) {
		super(QueryEdge.class);
		setSentence(sentence);
		setWeight(0);
		setCount(false);
		
		nodes = new Stack<QueryNode>();
		new Stack<QueryEdge>();
	}
	
	/**
	 * Set the sentence.
	 *
	 * @param sentence The sentence to set
	 */
	public void setSentence(MatchedEntitiesSentence sentence) {
		this.sentence = sentence;
	}

	/**
	 * Get the sentence.
	 *
	 * @return The sentence
	 */
	public MatchedEntitiesSentence getSentence() {
		return sentence;
	}

	/**
	 * Set the source.
	 *
	 * @param source The source to set
	 */
	public void setSource(QueryNode source) {
		//System.out.println("@QueryGraph.setSource source: " + source);	// debug
		if (this.source != null) {
			removeVertex(this.source);
		}
		this.source = source;
		addVertex(source);
	}

	/**
	 * Get the source.
	 *
	 * @return The source
	 */
	public QueryNode getSource() {
		return source;
	}
	
	/**
	 * Get the weight.
	 *
	 * @return The weight
	 */
	public double getWeight() {
		return weight;
	}

	/**
	 * Set the weight.
	 *
	 * @param weight The weight to set
	 */
	public void setWeight(double weight) {
		this.weight = weight;
	}

	public double addWeight(double ex) {
		weight += ex;
		return weight;
	}

	/**
	 * Set the isCount.
	 *
	 * @param isCount The isCount to set
	 */
	public void setCount(boolean isCount) {
		this.isCount = isCount;
	}

	/**
	 * Get the isCount.
	 *
	 * @return The isCount
	 */
	public boolean isCount() {
		return isCount;
	}

	public boolean addVertex(Resource resource, Resource schemaResource, 
			int id, double weight) {
		QueryNode vertex = new QueryNode(resource, schemaResource, id, weight);
		boolean isAdded = addVertex(vertex);
		if (isAdded) {
			addWeight(weight);
		}
		logger.debug("@addVertex " + resource + ", weight: " + weight);
		return isAdded;
	}
	
	public boolean removeVertex(QueryNode vertex) {
		boolean isRemoved = super.removeVertex(vertex);
		if (isRemoved) {
			addWeight(-vertex.getWeight());
		}
		logger.debug("@removeVertex " + vertex + ", weight: " + weight);
		return isRemoved;
	}
	
	public QueryEdge addEdge(QueryNode source, PropertyNode pNode, 
			QueryNode target, boolean isReverse) {
		QueryEdge edge = addEdge(source, target);
		if (edge != null) {
			edge.set(pNode, isReverse);
			addWeight(pNode.getWeight());
		}
		logger.debug("@addEdge <" + source + ", " + pNode + ", " + target + "> weight: " + weight);
		return edge;
	}
	
	public boolean removeEdge(QueryEdge edge) {
		boolean isRemoved = super.removeEdge(edge);
		if (isRemoved) {
			addWeight(-edge.getWeight());
		}
		logger.debug("@removeEdge " + edge + ", weight: " + weight);
		return isRemoved;
	}
	
	public QueryEdge pushEdge(QueryNode source, PropertyNode pNode, 
			QueryNode target, boolean isReverse) {
		addVertex(source);
		addVertex(target);
		
		nodes.push(target);
		QueryEdge edge = addEdge(source, pNode, target, isReverse);
		//System.out.println(edge);	// debug
		return edge;
	}
	
	public boolean popEdge() {
		QueryNode last = nodes.pop();
		return removeVertex(last);
	}
	
	
	public boolean hasQuery() {
		return vertexSet().size() > 0;
	}
	
	public String toString() {
		return "weight: " + weight + ", source: " + source + "\n" + vertexSet() + " " + edgeSet();
	}

	/**
	 * (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compareTo(QueryGraph o) {
		if (weight < o.getWeight()) return -1;
		else if (weight > o.getWeight()) return 1;
		return 0;
	}

}
